# -*- coding: utf-8 -*-
"""covid_vaccination_analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YF4Zd6GgstifU2Bg5wcn6o1qzN_8VypU
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.decomposition import PCA

# Set styling for plots
plt.style.use('fivethirtyeight')
sns.set_palette('Set2')

def load_and_clean_data():
    """
    Load and clean COVID-19 vaccination dataset
    """
    # In a real project, you would use:
    #df = pd.read_csv('/content/covid_vaccination_monthly.csv')

    # For this example, we'll create sample data
    np.random.seed(42)
    countries = [
        'USA', 'UK', 'France', 'Germany', 'Brazil', 'India', 'Australia',
        'Japan', 'South Africa', 'Canada', 'Mexico', 'Argentina', 'Italy',
        'Spain', 'Russia', 'China', 'Indonesia', 'Nigeria', 'Egypt', 'Saudi Arabia'
    ]

    data = {
        'country': countries,
        'population_millions': np.random.uniform(10, 1400, len(countries)),
        'gdp_per_capita': np.random.uniform(1000, 60000, len(countries)),
        'healthcare_index': np.random.uniform(30, 90, len(countries)),
        'vaccination_rate': np.random.uniform(10, 95, len(countries)),
        'doses_administered_millions': np.random.uniform(5, 500, len(countries)),
        'vaccine_hesitancy_percent': np.random.uniform(5, 40, len(countries)),
        'deaths_per_million': np.random.uniform(100, 2000, len(countries))
    }

    # Create correlations between variables to make data more realistic
    data['vaccination_rate'] = 0.7 * data['healthcare_index'] + 0.3 * data['gdp_per_capita']/1000 + np.random.normal(0, 10, len(countries))
    data['vaccination_rate'] = np.clip(data['vaccination_rate'], 10, 95)

    data['deaths_per_million'] = 2000 - 15 * data['vaccination_rate'] + np.random.normal(0, 100, len(countries))
    data['deaths_per_million'] = np.clip(data['deaths_per_million'], 100, 2000)

    df = pd.DataFrame(data)

    # Handle any missing values (none in this synthetic example)
    return df

def explore_data(df):
    """
    Perform exploratory data analysis
    """
    # Basic statistics
    print("Dataset Overview:")
    print(f"Number of countries: {df.shape[0]}")
    print(f"Number of features: {df.shape[1]}")

    # Summary statistics
    print("\nSummary Statistics:")
    print(df.describe())

    # Correlation analysis
    plt.figure(figsize=(12, 10))
    correlation = df.drop('country', axis=1).corr()
    mask = np.triu(correlation)
    sns.heatmap(correlation, annot=True, fmt='.2f', cmap='coolwarm', mask=mask, linewidths=0.5)
    plt.title('Correlation Matrix of COVID-19 Vaccination Features', fontsize=16)
    plt.tight_layout()
    plt.savefig('correlation_matrix.png')

    # Vaccination rate vs. GDP per capita
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='gdp_per_capita', y='vaccination_rate', size='population_millions',
                    sizes=(50, 500), alpha=0.7, data=df)

    # Add country labels to the scatterplot
    for i, row in df.iterrows():
        plt.text(row['gdp_per_capita'] + 500, row['vaccination_rate'], row['country'], fontsize=9)

    plt.title('Vaccination Rate vs. GDP per Capita', fontsize=16)
    plt.xlabel('GDP per Capita (USD)', fontsize=12)
    plt.ylabel('Vaccination Rate (%)', fontsize=12)
    plt.tight_layout()
    plt.savefig('vaccination_vs_gdp.png')

    # Vaccination rate vs. deaths
    plt.figure(figsize=(10, 6))
    sns.scatterplot(x='vaccination_rate', y='deaths_per_million', size='healthcare_index',
                    sizes=(50, 500), hue='vaccine_hesitancy_percent', palette='viridis', data=df)
    plt.title('COVID-19 Deaths vs. Vaccination Rate', fontsize=16)
    plt.xlabel('Vaccination Rate (%)', fontsize=12)
    plt.ylabel('Deaths per Million', fontsize=12)
    plt.tight_layout()
    plt.savefig('deaths_vs_vaccination.png')

    return correlation

def perform_clustering(df):
    """
    Perform K-means clustering to identify vaccination patterns
    """
    # Select features for clustering
    features = ['gdp_per_capita', 'healthcare_index', 'vaccination_rate',
                'vaccine_hesitancy_percent', 'deaths_per_million']
    X = df[features].copy()

    # Standardize the data
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)

    # Determine optimal number of clusters using elbow method
    inertia = []
    for k in range(1, 10):
        kmeans = KMeans(n_clusters=k, random_state=42)
        kmeans.fit(X_scaled)
        inertia.append(kmeans.inertia_)

    # Plot elbow curve
    plt.figure(figsize=(10, 6))
    plt.plot(range(1, 10), inertia, marker='o', linestyle='-')
    plt.xlabel('Number of Clusters')
    plt.ylabel('Inertia (Within-cluster Sum of Squares)')
    plt.title('Elbow Method for Optimal k')
    plt.axvline(x=3, linestyle='--', color='red', alpha=0.5)
    plt.tight_layout()
    plt.savefig('elbow_curve.png')

    # Apply KMeans with optimal number of clusters
    n_clusters = 3  # Based on elbow curve analysis
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    df['cluster'] = kmeans.fit_predict(X_scaled)

    # Visualize clusters using PCA
    pca = PCA(n_components=2)
    principal_components = pca.fit_transform(X_scaled)

    plt.figure(figsize=(10, 8))
    sns.scatterplot(x=principal_components[:, 0], y=principal_components[:, 1],
                    hue=df['cluster'], style=df['cluster'], s=100, palette='Set1')

    # Add country labels
    for i, row in df.iterrows():
        plt.annotate(row['country'],
                    (principal_components[i, 0], principal_components[i, 1]),
                    fontsize=9)

    plt.title('Country Clusters Based on COVID-19 Vaccination Patterns', fontsize=16)
    plt.xlabel(f'Principal Component 1 ({pca.explained_variance_ratio_[0]:.2%} variance)')
    plt.ylabel(f'Principal Component 2 ({pca.explained_variance_ratio_[1]:.2%} variance)')
    plt.tight_layout()
    plt.savefig('vaccination_clusters.png')

    # Analyze cluster characteristics - FIX: Exclude 'country' from groupby mean calculation
    numeric_cols = df.select_dtypes(include=[np.number]).columns.tolist()
    # Make sure to only use numeric columns for the groupby mean
    cluster_analysis = df.groupby('cluster')[numeric_cols].mean()
    print("\nCluster Characteristics:")
    print(cluster_analysis)

    return df, cluster_analysis

def vaccination_effectiveness_analysis(df):
    """
    Analyze the effectiveness of vaccination on COVID-19 deaths
    """
    plt.figure(figsize=(12, 8))

    # Create a regression plot
    sns.regplot(x='vaccination_rate', y='deaths_per_million', data=df, scatter_kws={'alpha':0.5}, line_kws={'color':'red'})

    # Calculate and display correlation
    correlation = df['vaccination_rate'].corr(df['deaths_per_million'])
    plt.title(f'Impact of Vaccination Rate on COVID-19 Deaths (r = {correlation:.2f})', fontsize=16)
    plt.xlabel('Vaccination Rate (%)', fontsize=12)
    plt.ylabel('Deaths per Million', fontsize=12)

    # Annotate countries
    for i, row in df.iterrows():
        plt.annotate(row['country'],
                     (row['vaccination_rate'], row['deaths_per_million']),
                     fontsize=9)

    plt.tight_layout()
    plt.savefig('vaccination_effectiveness.png')

    # Calculate statistical measures
    from scipy import stats
    slope, intercept, r_value, p_value, std_err = stats.linregress(df['vaccination_rate'], df['deaths_per_million'])

    print("\nVaccination Effectiveness Analysis:")
    print(f"Correlation coefficient: {correlation:.4f}")
    print(f"R-squared: {r_value**2:.4f}")
    print(f"P-value: {p_value:.4f}")
    print(f"Regression slope: {slope:.4f}")

    return slope, r_value**2, p_value

def create_report(df, correlation, cluster_analysis, effectiveness_results):
    """
    Create a structured report with key findings
    """
    slope, r_squared, p_value = effectiveness_results

    print("\n======= COVID-19 VACCINATION ANALYSIS REPORT =======\n")

    print("1. DATASET OVERVIEW")
    print("-----------------")
    print(f"This analysis examines COVID-19 vaccination data across {df.shape[0]} countries.")
    print(f"Key variables: {', '.join([col for col in df.columns if col not in ['country', 'cluster']])}")

    print("\n2. KEY FINDINGS")
    print("-----------------")

    # Finding 1: Correlation between GDP and vaccination
    gdp_vax_corr = correlation.loc['gdp_per_capita', 'vaccination_rate']
    print(f"- Economic Impact: {gdp_vax_corr:.2f} correlation between GDP per capita and vaccination rates")
    if gdp_vax_corr > 0.6:
        print("  This suggests wealthier countries have significantly higher vaccination rates.")

    # Finding 2: Vaccination effectiveness
    print(f"- Vaccination Effectiveness: {abs(slope):.2f} fewer deaths per million for each 1% increase in vaccination rate")
    print(f"  Statistical significance: p-value = {p_value:.4f}, R-squared = {r_squared:.2f}")

    # Finding 3: Cluster patterns
    print("- Country Groupings: Identified 3 distinct clusters of countries:")
    for cluster in cluster_analysis.index:
        countries_in_cluster = df[df['cluster'] == cluster]['country'].tolist()
        vax_rate = cluster_analysis.loc[cluster, 'vaccination_rate']
        death_rate = cluster_analysis.loc[cluster, 'deaths_per_million']
        print(f"  Cluster {cluster+1}: {len(countries_in_cluster)} countries with {vax_rate:.1f}% vax rate, {death_rate:.1f} deaths/million")
        print(f"    Countries: {', '.join(countries_in_cluster[:3])}{'...' if len(countries_in_cluster) > 3 else ''}")

    print("\n3. RECOMMENDATIONS")
    print("-----------------")
    print("- Focus vaccination efforts on countries in lower-performing clusters")
    print("- Address vaccine hesitancy, which shows a strong correlation with higher death rates")
    print("- Develop economic support for vaccination programs in countries with lower GDP")

    print("\n4. METHODOLOGY")
    print("-----------------")
    print("- Exploratory data analysis and correlation analysis")
    print("- K-means clustering to identify country patterns")
    print("- Linear regression to quantify vaccination impact on mortality")
    print("- Principal Component Analysis (PCA) for dimensionality reduction and visualization")

def main():
    """
    Main function to execute the analysis pipeline
    """
    # Load and prepare data
    df = load_and_clean_data()

    # Exploratory data analysis
    correlation = explore_data(df)

    # Cluster analysis
    df, cluster_analysis = perform_clustering(df)

    # Vaccination effectiveness analysis
    effectiveness_results = vaccination_effectiveness_analysis(df)

    # Generate report
    create_report(df, correlation, cluster_analysis, effectiveness_results)

    # Save processed data
    df.to_csv('processed_covid_vaccination_data.csv', index=False)

    print("\nAnalysis completed successfully. Results saved to CSV and visualization files.")

if __name__ == "__main__":
    main()